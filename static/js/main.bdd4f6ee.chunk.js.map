{"version":3,"sources":["components/ScaleControl.tsx","utilities/index.ts","utilities/colorSet.ts","components/CanvasGraph.tsx","hooks/useRefInit.ts","data/Recipes.ts","components/RecipeGraph.tsx","hooks/useSimulation.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","userSelect","display","flexDirection","alignItems","justifyContent","padding","spacing","color","palette","text","secondary","scaleText","width","textAlign","resetButton","minWidth","resetButtonText","lineHeight","ScaleControl","React","memo","scale","setScale","styles","setScaleBounded","newScale","Math","max","round","Paper","className","IconButton","size","title","disabled","onClick","Typography","toFixed","Button","classes","label","distinct","values","getKey","distinctValues","keys","Set","value","key","toString","has","push","add","GOLDEN_RATIO_GONJUGATE","canvasContainer","position","height","overflow","touchAction","canvas","scaleContainer","top","right","margin","colors","h","s","v","hsv","hex","createColorSet","clientToCanvasPosition","clientPosition","getBoundingClientRect","left","canvasX","clientX","canvasY","clientY","canvasToSimulationPosition","canvasPosition","translation","simX","x","simY","y","findNodeByPoint","nodes","nodeRadius","simulationPosition","arr","Array","from","reverse","find","node","xDistance","yDistance","sqrt","CanvasGraph","simulationRef","links","canvasRef","useRef","useState","setSize","setTranslation","useEffect","onResize","current","clientWidth","clientHeight","window","addEventListener","removeEventListener","mousePosition","setMousePosition","touchId","setTouchId","lastTouch","setLastTouch","mouseDown","setMouseDown","draggingNode","setDraggingNode","onMouseDown","useCallback","e","simPosition","onTouchStart","preventDefault","touches","length","touch","identifier","onMouseMove","coords","fx","fy","alpha","restart","movementX","movementY","oldTranslation","onTouchMove","changedTouches","t","onMouseUp","undefined","onTouchEnd","onWheel","deltaY","newTranslation","imagesRef","getContext","context","resetTransform","clearRect","translate","lineWidth","link","strokeStyle","target","id","beginPath","moveTo","source","lineTo","stroke","image","data","src","complete","save","arc","PI","clip","drawImage","restore","type","NODE_RADIUS","console","error","hoveredNode","ref","name","style","map","alt","onSetImage","UNINITIALIZED","Symbol","for","useRefInit","init","recipes","container","DISPLAYED_CATEGORIES","allRecipes","filter","recipe","category","recipeId","ingredientId","ingredient","linkId","RecipeGraph","nodesRef","ingredients","flatMap","linksRef","initSim","setTick","sim","on","oldTick","stop","useSimulation","d3","force","distance","Graph","strength","createMuiTheme","App","MuiThemeProvider","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdd4f6ee.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, Typography, Button, Paper, createStyles, IconButton } from '@material-ui/core';\r\nimport ZoomInIcon from '@material-ui/icons/Add';\r\nimport ZoomOutIcon from '@material-ui/icons/Remove';\r\nimport ZoomedInIcon from '@material-ui/icons/ZoomIn';\r\nimport ZoomedOutIcon from '@material-ui/icons/ZoomOut';\r\n\r\nconst useStyles = makeStyles( ( theme ) => createStyles( {\r\n  root: {\r\n    userSelect: 'none',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: theme.spacing( 0.5, 1 ),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  scaleText: {\r\n    width: '5ch',\r\n    textAlign: 'center',\r\n  },\r\n  resetButton: {\r\n    padding: theme.spacing( 0.5, 1 ),\r\n    minWidth: 0,\r\n  },\r\n  resetButtonText: {\r\n    lineHeight: 'normal',\r\n  }\r\n} ) );\r\n\r\ninterface Props\r\n{\r\n  scale: number;\r\n  setScale: ( scale: number ) => void;\r\n}\r\n\r\nconst ScaleControl: React.FC<Props> = React.memo( ( { scale, setScale } ) =>\r\n{\r\n  const styles = useStyles();\r\n\r\n  const setScaleBounded = ( newScale: number ) => setScale( Math.max( 0.1, Math.round( ( newScale ) * 100 ) / 100 ) );\r\n\r\n  return (\r\n    <Paper className={styles.root}>\r\n      {Math.round( scale ) < 1 ?\r\n        (\r\n          <ZoomedOutIcon />\r\n        ) :\r\n        (\r\n          <ZoomedInIcon />\r\n        )\r\n      }\r\n      <IconButton\r\n        size=\"small\"\r\n        color=\"inherit\"\r\n        title=\"Zoom Out\"\r\n        disabled={scale <= 0.1}\r\n        onClick={() => setScaleBounded( scale - 0.1 )}\r\n      >\r\n        <ZoomOutIcon />\r\n      </IconButton>\r\n      <Typography className={styles.scaleText}>\r\n        {( scale * 100 ).toFixed( 0 )}%\r\n      </Typography>\r\n      <IconButton\r\n        size=\"small\"\r\n        color=\"inherit\"\r\n        title=\"Zoom In\"\r\n        onClick={() => setScaleBounded( scale + 0.1 )}\r\n      >\r\n        <ZoomInIcon />\r\n      </IconButton>\r\n      <Button\r\n        className={styles.resetButton}\r\n        classes={{\r\n          root: styles.resetButton,\r\n          label: styles.resetButtonText,\r\n        }}\r\n        color=\"inherit\"\r\n        disabled={scale === 1}\r\n        onClick={() => setScale( 1 )}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </Paper>\r\n  );\r\n} );\r\n\r\nexport default ScaleControl;\r\n","export function distinct( values: string[] ): string[];\r\nexport function distinct( values: number[] ): number[];\r\nexport function distinct<T extends object>( values: T[], getKey: ( value: T ) => string ): T[];\r\nexport function distinct<T extends object>( values: T[], getKey?: ( value: T ) => string ): T[]\r\n{\r\n  let distinctValues: T[] = [];\r\n  let keys = new Set<string>();\r\n\r\n  for( let value of values )\r\n  {\r\n    let key = getKey ? getKey( value ) : value.toString();\r\n    if( !keys.has( key ) )\r\n    {\r\n      distinctValues.push( value );\r\n      keys.add( key );\r\n    }\r\n  }\r\n\r\n  return distinctValues;\r\n}\r\n\r\nexport function reversed<T>( arr: ArrayLike<T> )\r\n{\r\n  return Array.from( arr ).reverse();\r\n}\r\n","import color from 'color';\r\n\r\nconst GOLDEN_RATIO_GONJUGATE = 0.618033988749895;\r\n\r\nexport default function createColorSet()\r\n{\r\n  const colors: { [ value: string ]: string } = {};\r\n  let h: number = 0.91018206932939563879;\r\n\r\n  return ( value: string, s: number = 100, v: number = 100 ) =>\r\n  {\r\n    if( !( value in colors ) )\r\n    {\r\n      h += GOLDEN_RATIO_GONJUGATE;\r\n      h %= 1;\r\n      colors[ value ] = color.hsv( h * 360, s, v ).hex();\r\n    }\r\n    return colors[ value ];\r\n  };\r\n}\r\n","import React, { useRef, useState, useEffect, useCallback } from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\n\r\nimport ScaleControl from 'components/ScaleControl';\r\n\r\nimport { NodeDatum, LinkDatum } from 'data/Simulation';\r\n\r\nimport { distinct, reversed } from 'utilities';\r\nimport createColorSet from 'utilities/colorSet';\r\n\r\nconst NODE_RADIUS = 16;\r\nconst BORDER_THICKNESS = 4;\r\n\r\nconst useStyles = makeStyles( ( theme ) => createStyles( {\r\n  canvasContainer: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    touchAction: 'none',\r\n  },\r\n  canvas: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  scaleContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    margin: theme.spacing( 2 ),\r\n  }\r\n} ) );\r\n\r\nconst colors = createColorSet();\r\n\r\ninterface ClientPosition\r\n{\r\n  clientX: number;\r\n  clientY: number;\r\n}\r\n\r\ninterface CanvasPosition\r\n{\r\n  canvasX: number;\r\n  canvasY: number;\r\n}\r\n\r\ninterface Size\r\n{\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\ninterface Translation\r\n{\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface SimulationPosition\r\n{\r\n  simX: number;\r\n  simY: number;\r\n}\r\n\r\ntype MouseLikeEvent = ClientPosition;\r\n\r\ninterface MouseMoveLikeEvent extends ClientPosition\r\n{\r\n  movementX: number;\r\n  movementY: number;\r\n}\r\n\r\nfunction clientToCanvasPosition( canvas: HTMLCanvasElement, clientPosition: ClientPosition ): CanvasPosition\r\n{\r\n  let { left, top } = canvas.getBoundingClientRect();\r\n\r\n  return {\r\n    canvasX: clientPosition.clientX - left,\r\n    canvasY: clientPosition.clientY - top,\r\n  };\r\n}\r\n\r\nfunction canvasToSimulationPosition( canvasPosition: CanvasPosition, size: Size, translation: Translation, scale: number ): SimulationPosition\r\n{\r\n  return {\r\n    simX: ( canvasPosition.canvasX - size.width / 2 - translation.x ) / scale,\r\n    simY: ( canvasPosition.canvasY - size.height / 2 - translation.y ) / scale,\r\n  };\r\n}\r\n\r\nfunction findNodeByPoint( nodes: NodeDatum[], nodeRadius: number, simulationPosition: SimulationPosition )\r\n{\r\n  return reversed( nodes ).find( ( node ) =>\r\n  {\r\n    const xDistance = node.x - simulationPosition.simX;\r\n    const yDistance = node.y - simulationPosition.simY;\r\n    const distance = Math.sqrt( xDistance * xDistance + yDistance * yDistance );\r\n\r\n    return distance <= nodeRadius;\r\n  } );\r\n}\r\n\r\ninterface GraphProps\r\n{\r\n  simulationRef: React.MutableRefObject<d3.Simulation<NodeDatum, LinkDatum>>;\r\n  nodes: NodeDatum[];\r\n  links: LinkDatum[];\r\n}\r\n\r\ninterface GraphComponent extends React.FC<GraphProps>\r\n{\r\n  nodeRadius: number;\r\n}\r\n\r\nconst CanvasGraph: GraphComponent = ( { simulationRef, nodes, links } ) =>\r\n{\r\n  const styles = useStyles();\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>( null );\r\n\r\n  const [ size, setSize ] = useState<Size>( { width: 0, height: 0 } );\r\n  const [ translation, setTranslation ] = useState<Translation>( { x: 0, y: 0 } );\r\n  const [ scale, setScale ] = useState( 0.4 );\r\n\r\n  useEffect( () =>\r\n  {\r\n    function onResize()\r\n    {\r\n      if( canvasRef.current )\r\n      {\r\n        setSize( {\r\n          width: canvasRef.current.clientWidth,\r\n          height: canvasRef.current.clientHeight\r\n        } );\r\n      }\r\n    }\r\n\r\n    window.addEventListener( 'resize', onResize );\r\n\r\n    onResize();\r\n\r\n    return () => window.removeEventListener( 'resize', onResize );\r\n  }, [] );\r\n\r\n  const [ mousePosition, setMousePosition ] = useState<CanvasPosition>();\r\n  const [ touchId, setTouchId ] = useState<number>();\r\n  const [ lastTouch, setLastTouch ] = useState<ClientPosition>();\r\n  const [ mouseDown, setMouseDown ] = useState( false );\r\n  const [ draggingNode, setDraggingNode ] = useState<NodeDatum>();\r\n\r\n  const onMouseDown = useCallback( ( e: MouseLikeEvent ) =>\r\n  {\r\n\r\n    if( !canvasRef.current )\r\n    {\r\n      return;\r\n    }\r\n\r\n    setMouseDown( true );\r\n\r\n    let canvasPosition = clientToCanvasPosition( canvasRef.current, e );\r\n    let simPosition = canvasToSimulationPosition( canvasPosition, size, translation, scale );\r\n    setDraggingNode( findNodeByPoint( nodes, NODE_RADIUS, simPosition ) );\r\n  }, [ nodes, size, translation, scale ] );\r\n\r\n  const onTouchStart = useCallback( ( e: React.TouchEvent<HTMLElement> ) =>\r\n  {\r\n    e.preventDefault();\r\n\r\n    if( e.touches.length === 1 )\r\n    {\r\n      const touch = e.touches[ 0 ];\r\n      setTouchId( touch.identifier );\r\n      setLastTouch( {\r\n        clientX: touch.clientX,\r\n        clientY: touch.clientY,\r\n      } );\r\n\r\n      onMouseDown( touch );\r\n    }\r\n  }, [ onMouseDown ] );\r\n\r\n  const onMouseMove = useCallback( ( e: MouseMoveLikeEvent ) =>\r\n  {\r\n    if( !canvasRef.current )\r\n    {\r\n      return;\r\n    }\r\n\r\n    let canvasPosition = clientToCanvasPosition( canvasRef.current, e );\r\n    setMousePosition( canvasPosition );\r\n\r\n    if( !mouseDown )\r\n    {\r\n      return;\r\n    }\r\n\r\n    let coords = canvasToSimulationPosition( canvasPosition, size, translation, scale );\r\n\r\n    if( draggingNode )\r\n    {\r\n      draggingNode.fx = coords.simX;\r\n      draggingNode.fy = coords.simY;\r\n      simulationRef.current.alpha( 1.0 );\r\n      simulationRef.current.restart();\r\n    }\r\n    else\r\n    {\r\n      const { movementX, movementY } = e;\r\n      setTranslation( ( oldTranslation ) => ( {\r\n        x: oldTranslation.x + movementX,\r\n        y: oldTranslation.y + movementY,\r\n      } ) );\r\n    }\r\n  }, [ mouseDown, size, draggingNode, simulationRef, translation, scale ] );\r\n\r\n  useEffect( () =>\r\n  {\r\n\r\n    window.addEventListener( 'mousemove', onMouseMove );\r\n\r\n    return () => window.removeEventListener( 'mousemove', onMouseMove );\r\n\r\n  }, [ onMouseMove ] );\r\n\r\n  const onTouchMove = useCallback( ( e: React.TouchEvent<HTMLElement> ) =>\r\n  {\r\n    e.preventDefault();\r\n\r\n    if( typeof touchId !== 'number'\r\n      || !lastTouch )\r\n    {\r\n      return;\r\n    }\r\n\r\n    const touch = Array.from( e.changedTouches ).find( ( t ) => t.identifier === touchId );\r\n    if( !touch )\r\n    {\r\n      return;\r\n    }\r\n\r\n    const movementX = touch.clientX - lastTouch.clientX;\r\n    const movementY = touch.clientY - lastTouch.clientY;\r\n\r\n    onMouseMove( {\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      movementX,\r\n      movementY\r\n    } );\r\n\r\n    setLastTouch( {\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n    } );\r\n\r\n  }, [ onMouseMove, lastTouch, touchId ] );\r\n\r\n  const onMouseUp = useCallback( ( e: MouseLikeEvent ) =>\r\n  {\r\n    if( draggingNode )\r\n    {\r\n      draggingNode.fx = null;\r\n      draggingNode.fy = null;\r\n      simulationRef.current.alpha( 1.0 );\r\n      simulationRef.current.restart();\r\n    }\r\n\r\n    setMouseDown( false );\r\n    setTouchId( undefined );\r\n    setLastTouch( undefined );\r\n    setDraggingNode( undefined );\r\n\r\n  }, [ draggingNode, simulationRef ] );\r\n\r\n  useEffect( () =>\r\n  {\r\n    window.addEventListener( 'mouseup', onMouseUp );\r\n\r\n    return () => window.removeEventListener( 'mouseup', onMouseUp );\r\n\r\n  }, [ onMouseUp ] );\r\n\r\n  const onTouchEnd = useCallback( ( e: React.TouchEvent<HTMLElement> ) =>\r\n  {\r\n    e.preventDefault();\r\n\r\n    if( typeof touchId !== 'number' )\r\n    {\r\n      return;\r\n    }\r\n\r\n    const touch = Array.from( e.changedTouches ).find( ( t ) => t.identifier === touchId );\r\n    if( !touch )\r\n    {\r\n      return;\r\n    }\r\n\r\n    onMouseUp( touch );\r\n\r\n  }, [ touchId, onMouseUp ] );\r\n\r\n  const onWheel = useCallback( ( e: React.WheelEvent<HTMLElement> ) =>\r\n  {\r\n    if( !canvasRef.current )\r\n    {\r\n      return;\r\n    }\r\n\r\n    let canvasPosition = clientToCanvasPosition( canvasRef.current, e );\r\n    let { simX, simY } = canvasToSimulationPosition( canvasPosition, size, translation, scale );\r\n    let newScale = Math.max( 0.1, Math.round( ( scale + e.deltaY * -0.001 ) * 100 ) / 100 );\r\n\r\n    let newTranslation: Translation = {\r\n      x: e.clientX - size.width / 2 - simX * newScale,\r\n      y: e.clientY - size.height / 2 - simY * newScale,\r\n    };\r\n    setTranslation( newTranslation );\r\n    setScale( newScale );\r\n  }, [ size, translation, scale ] );\r\n\r\n  const imagesRef = useRef<{ [ src: string ]: HTMLImageElement | null | undefined }>( {} );\r\n\r\n  const onSetImage = ( src: string, image: HTMLImageElement | null ) =>\r\n  {\r\n    imagesRef.current[ src ] = image;\r\n  };\r\n\r\n  useEffect( () =>\r\n  {\r\n    if( !canvasRef.current )\r\n    {\r\n      return;\r\n    }\r\n\r\n    if( !canvasRef.current.getContext )\r\n    {\r\n      console.error( 'Browser does not support the canvas element.' );\r\n      return;\r\n    }\r\n\r\n    const context = canvasRef.current.getContext( '2d' );\r\n    if( !context )\r\n    {\r\n      console.error( 'Failed to retrieve context for canvas.' );\r\n      return;\r\n    }\r\n\r\n    context.resetTransform();\r\n    context.clearRect( 0, 0, size.width, size.height );\r\n    context.translate( size.width / 2.0 + translation.x, size.height / 2.0 + translation.y );\r\n    context.scale( scale, scale );\r\n\r\n    context.lineWidth = 1.0;\r\n\r\n    for( let link of links )\r\n    {\r\n      context.strokeStyle = colors( link.target.id, 100, 50 );\r\n      context.beginPath();\r\n      context.moveTo( link.source.x, link.source.y );\r\n      context.lineTo( link.target.x, link.target.y );\r\n      context.stroke();\r\n    }\r\n\r\n    for( let node of nodes )\r\n    {\r\n      let image = imagesRef.current[ node.data.src ];\r\n      if( image && image.complete )\r\n      {\r\n        context.save();\r\n        context.beginPath();\r\n        context.arc( node.x, node.y, NODE_RADIUS, 0, 2 * Math.PI, false );\r\n        context.clip();\r\n        context.drawImage(\r\n          image,\r\n          node.x - NODE_RADIUS,\r\n          node.y - NODE_RADIUS,\r\n          2 * NODE_RADIUS,\r\n          2 * NODE_RADIUS\r\n        );\r\n        context.restore();\r\n      }\r\n\r\n      context.strokeStyle = node.type === 'ingredient' ? 'orange' : 'green';\r\n      context.lineWidth = BORDER_THICKNESS;\r\n      context.beginPath();\r\n      context.arc( node.x, node.y, NODE_RADIUS - BORDER_THICKNESS / 2, 0, 2 * Math.PI, false );\r\n      context.stroke();\r\n    }\r\n  } );\r\n\r\n  const hoveredNode = mousePosition && findNodeByPoint(\r\n    nodes,\r\n    NODE_RADIUS,\r\n    canvasToSimulationPosition( mousePosition, size, translation, scale )\r\n  );\r\n\r\n  // useEffect( () =>\r\n  // {\r\n  //   if( !mousePosition )\r\n  //   {\r\n  //     return;\r\n  //   }\r\n\r\n  //   if( !canvasRef.current )\r\n  //   {\r\n  //     return;\r\n  //   }\r\n\r\n  //   if( !canvasRef.current.getContext )\r\n  //   {\r\n  //     console.error( 'Browser does not support the canvas element.' );\r\n  //     return;\r\n  //   }\r\n\r\n  //   const context = canvasRef.current.getContext( '2d' );\r\n  //   if( !context )\r\n  //   {\r\n  //     console.error( 'Failed to retrieve context for canvas.' );\r\n  //     return;\r\n  //   }\r\n\r\n  //   let { simX, simY } = canvasToSimulationPosition( mousePosition, size, translation, scale );\r\n  //   context.fillStyle = hoveredNode ? 'green' : 'blue';\r\n  //   context.beginPath();\r\n  //   context.arc( simX, simY, 6, 0, 2 * Math.PI, false );\r\n  //   context.fill();\r\n  // } );\r\n\r\n  return (\r\n    <div className={styles.canvasContainer}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        className={styles.canvas}\r\n        title={hoveredNode && hoveredNode.name}\r\n        width={size.width}\r\n        height={size.height}\r\n        onMouseDown={onMouseDown}\r\n        onTouchStart={onTouchStart}\r\n        onTouchMove={onTouchMove}\r\n        onTouchEnd={onTouchEnd}\r\n        onWheel={onWheel}\r\n      />\r\n      <div className={styles.scaleContainer}>\r\n        <ScaleControl scale={scale} setScale={setScale} />\r\n      </div>\r\n      <div style={{ display: 'none' }}>\r\n        {distinct( nodes.map( ( node ) => node.data.src ) ).map( ( src ) => (\r\n          <img\r\n            key={src}\r\n            src={src}\r\n            alt=\"\"\r\n            ref={( ref ) => onSetImage( src, ref )}\r\n          />\r\n        ) )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCanvasGraph.nodeRadius = NODE_RADIUS;\r\n\r\nexport default CanvasGraph;\r\n","import { useRef } from 'react';\r\n\r\nconst UNINITIALIZED = Symbol.for( 'UNINITIALIZED' );\r\n\r\nexport default function useRefInit<T>( init: () => T )\r\n{\r\n  const ref = useRef<T | typeof UNINITIALIZED>( UNINITIALIZED );\r\n  if( ref.current === UNINITIALIZED )\r\n  {\r\n    ref.current = init();\r\n  }\r\n  return ref as React.MutableRefObject<T>;\r\n}\r\n","import allRecipes from 'data/recipes.json';\r\n\r\nexport interface Ingredient\r\n{\r\n  name: string;\r\n  src: string;\r\n}\r\n\r\nexport interface Recipe\r\n{\r\n  name: string;\r\n  category: string;\r\n  src: string;\r\n  ingredients: Ingredient[];\r\n}\r\n\r\nexport const recipes: Recipe[] = allRecipes;\r\n","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\n\r\nimport Graph from 'components/CanvasGraph';\r\n\r\nimport useRefInit from 'hooks/useRefInit';\r\nimport useSimulation from 'hooks/useSimulation';\r\n\r\nimport { Recipe, Ingredient, recipes as allRecipes } from 'data/Recipes';\r\nimport { NodeDatum, LinkDatum, UninitializedNodeDatum, UninitializedLinkDatum } from 'data/Simulation';\r\n\r\nimport { distinct } from 'utilities';\r\n\r\nconst useStyles = makeStyles( ( theme ) => createStyles( {\r\n  container: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n} ) );\r\n\r\nconst DISPLAYED_CATEGORIES = new Set( [\r\n  'Breakfast',\r\n  'Morning Dollar Value Menu',\r\n  'Burritos',\r\n  'Dollar Cravings Menu',\r\n  'Freezes',\r\n  'Fresco Menu',\r\n  'Limited Time Offer',\r\n  'Power Menu',\r\n  'Sides',\r\n  'Specialties',\r\n  'Drinks & Sweets',\r\n  'Tacos',\r\n  'Cantina Menu',\r\n  'Cantina Beer, Wine and Spirits',\r\n  'Las Vegas Cantina Menu',\r\n  'Vegetarian Menu',\r\n] );\r\nconst recipes: Recipe[] = distinct(\r\n  allRecipes.filter( ( recipe ) => DISPLAYED_CATEGORIES.has( recipe.category ) ),\r\n  ( recipe ) => recipe.name\r\n);\r\n\r\nconst recipeId = ( recipe: Recipe ) => `recipe_${recipe.name}`;\r\nconst ingredientId = ( ingredient: Ingredient ) => `ingredient_${ingredient.name}`;\r\nconst linkId = ( recipe: Recipe, ingredient: Ingredient ) => `${recipeId( recipe )}->${ingredientId( ingredient )}`;\r\n\r\nconst RecipeGraph: React.FC = () =>\r\n{\r\n  const styles = useStyles();\r\n\r\n  const nodesRef = useRefInit<NodeDatum[]>( () =>\r\n  {\r\n    const ingredients = distinct( recipes.flatMap( ( recipe ) => recipe.ingredients ), ( ingredient ) => ingredient.name );\r\n\r\n    return [\r\n      ...ingredients.map<UninitializedNodeDatum>( ( ingredient ) => ( {\r\n        id: ingredientId( ingredient ),\r\n        name: ingredient.name,\r\n        type: 'ingredient',\r\n        data: ingredient,\r\n      } ) ),\r\n      ...recipes.map<UninitializedNodeDatum>( ( recipe ) => ( {\r\n        id: recipeId( recipe ),\r\n        name: `${recipe.name} (${recipe.category})`,\r\n        type: 'recipe',\r\n        data: recipe,\r\n      } ) )\r\n    ] as NodeDatum[];\r\n  } );\r\n\r\n  const linksRef = useRefInit<LinkDatum[]>( () =>\r\n    recipes\r\n      .flatMap<UninitializedLinkDatum>( ( recipe ) =>\r\n        recipe.ingredients\r\n          .map( ( ingredient ) => ( {\r\n            id: linkId( recipe, ingredient ),\r\n            source: recipeId( recipe ),\r\n            target: ingredientId( ingredient ),\r\n          } ) )\r\n      ) as LinkDatum[]\r\n  );\r\n\r\n  const simulationRef = useSimulation( () =>\r\n  {\r\n    return d3.forceSimulation<NodeDatum, LinkDatum>( nodesRef.current )\r\n      .force( 'link',\r\n        d3.forceLink<NodeDatum, LinkDatum>( linksRef.current ).id( ( node ) => node.id )\r\n          .distance( Graph.nodeRadius * 10 )\r\n      )\r\n      .force( 'charge', d3.forceManyBody().strength( -Graph.nodeRadius * 20 ) )\r\n      .force( 'center', d3.forceCenter( 0, 0 ) )\r\n      .force( 'radial', d3.forceRadial( 500 ) )\r\n      .force( 'collide', d3.forceCollide( Graph.nodeRadius ) );\r\n  } );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Graph\r\n        simulationRef={simulationRef}\r\n        nodes={nodesRef.current}\r\n        links={linksRef.current}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeGraph;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport useRefInit from 'hooks/useRefInit';\r\n\r\nexport default function useSimulation<N extends d3.SimulationNodeDatum, L extends d3.SimulationLinkDatum<N>>( initSim: () => d3.Simulation<N, L> )\r\n{\r\n  const simulationRef = useRefInit( initSim );\r\n  const [ , setTick ] = useState( 0 );\r\n\r\n  useEffect( () =>\r\n  {\r\n    const tickEvent = 'tick.setTick';\r\n    const sim = simulationRef.current;\r\n\r\n    function onTick()\r\n    {\r\n      setTick( ( oldTick ) => oldTick + 1 );\r\n    }\r\n\r\n    sim.on( tickEvent, onTick );\r\n\r\n    sim.restart();\r\n\r\n    return () =>\r\n    {\r\n      sim.on( tickEvent, null );\r\n\r\n      sim.stop();\r\n    };\r\n  }, [ simulationRef ] );\r\n\r\n  return simulationRef;\r\n}\r\n","import React from 'react';\r\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from '@material-ui/core';\r\n\r\nimport 'typeface-roboto';\r\n\r\nimport RecipeGraph from 'components/RecipeGraph';\r\n\r\nimport './App.css';\r\n\r\nconst theme = createMuiTheme( {\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n} );\r\n\r\nconst App: React.FC = () =>\r\n{\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <RecipeGraph />\r\n    </MuiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById( 'root' )\n);\n\nif( process.env.NODE_ENV === 'development' )\n{\n  if( module.hot )\n  {\n    module.hot.accept( './App', () =>\n    {\n      console.log( '---------- %cAPP HOT RELOAD%c ----------', 'color: lightblue; font-weight: bold;', '' );\n\n      ReactDOM.render(\n        <App />,\n        document.getElementById( 'root' )\n      );\n    } );\n  }\n}\n"],"sourceRoot":""}